* Vibevolts

Creating a new version of volts that runs faster using jules and other tools.



* Todo

** Create new points instead of red satellties
- Do a little research to figure out how to create a nice 3d
  space filling set of points.
- create a nice grid of points to be observed for now. 

** Compute exclusions
*** Satellites and observatories
This test needs to be applied to any potential or actual pointing.
It should be done across the whole vector.
- solar - is the sun within the FOV
- lunar - is the moon within the FOV
- earth - for satellite is the earth within FOV, for observatory
  make it above the horizon.

** visibility
- Create a 2-d array that has a flag for each time the satellite
  might be observed, a row for each time in the simulaton,
  and a  vector of the times for the rows.
- for each target, compute if its within anyones FOV, if the
  observer isn't blinded, and the SNR is high enough.


** Pointing selections (OK, this one will take some developement!)

** Scoring
- use the visibilty matrix above
- take the visibility vector and calculate the fraction
  of the time that the thing is observed
- Calculate the gap times- basically for each column,
  compute the interobservation distances and histogram
  them.
  

* Log


** 2025-08

*** [2025-08-15 Fri]
Looking at the plan above, I wrote a prompt for gemini to create
the space filling data.

**** Prompt for Gemini
I need an algorithm that will create a set of points in 3d space.
Relative to a central point, they should be space logarithmically
spaced in distance from the central point, but equally spaced in
angle in any range of distances. Subject to these constraints the
points should lie between an inner and an outer radius. Find this
algorithm, and if possible give me code to execute it.

take the function we just generated and add a new function that creates
4 plots: first, a 3d plot using plotly that displays the points
(assuming we are in a Jupyter notebook), a plot that histograms the
radii of the points, and plots that display the angular distributions
of the points in terms of latitude and longitude. Display the function
so I can copy it.

*** [2025-08-14 Thu]
Ok, lots of today has so far just been figuring out git and github and
emacs and remembering those commands.  I think I just need to download
a nice git single page to put in my desk references.

I don't know how this is going to work: but I'm going to try it out!
OK, I'm seeing that I can actually do some editing on this in github 
itslef.  It's OK I guess.  

It's rather interesting to be moving these things around between github
and other locations so quickly, and being able to edit thigns everywhere.

OK, the next action I need to do is to actually get radiometry working,
and stuff like that. 

**** Prompt1
Create a function called solarexclusion.
Create an exclusion numpy vector. the same length as the number of
satellites.
Create a function which operates on all the satellites in
the list of satellites in a vectorized manner.
create a vector from the satellite to the sun and the vector
representing the satellite pointing.  If the angle between these
two is less than the solar exclusion angle for the satellite,
place a 1 in the exclusion list, othewise leave it as 0.
Return this vector as well as a vector of the angle from
the function.

Create a test function that prints these two vectors out.




