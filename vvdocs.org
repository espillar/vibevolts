#+TITLE: VibeVolts Documentation

This document provides an overview of the data structures,
functions, and dependencies for the VibeVolts simulation toolkit.

* HTML Wiki

A pure HTML version of this documentation is available in the file
[[file:wiki.html][wiki.html]].

* 1. Common Data Structures

The toolkit uses two primary data structures to manage simulation
state and physical constants.

** 1.1. Simulation State Dictionary (~simulation_data~)

This is the central data structure, created by the
~initializeStructures~ function in ~simulation.py~. It is a Python
dictionary that organizes all simulation entities into categories.

#+BEGIN_SRC python
{
    'start_time': datetime,
    'counts': {
        'celestial': 2,
        'satellites': num_satellites,
        'observatories': num_observatories,
        'red_satellites': num_red_satellites
    },
    'celestial': { ... },
    'satellites': { ... },
    'observatories': { ... },
    'red_satellites': { ... },
    'fixedpoints': { ... }
}
#+END_SRC

*** Key Components:

- */orbital_elements/*: A NumPy array (~n x 6~) containing the
  classical orbital elements for each satellite.
- */detector/*: A NumPy array (~n x 7~) containing the properties
  of each sensor.
- */fixedpoints/*: A dictionary containing the properties of the
  static points in space used as observation targets.

** 1.2. Radiometric Filter Data (~FILTER_DATA~)

This dictionary, located in ~radiometry_data.py~, provides standard
data for a variety of astronomical filters.

** 1.3. Physical Constants

The ~radiometry_data.py~ module also defines the following physical
constants:

- *AU_M*: The astronomical unit in meters (~1.496e+11 m~).
- *RSUN_M*: The radius of the Sun in meters (~6.957e+08 m~).

* 2. Existing Functions

This section describes the functions available in the toolkit,
organized by module.

** 2.1. ~simulation.py~

- *initializeStructures(...)*: Creates and returns the main
  ~simulation_data~ dictionary.

** 2.2. ~propagation.py~

- *celestial_update(...)*: Updates Sun and Moon positions.
- *readtle(...)*: Reads a TLE file.
- *propagate_satellites(...)*: Propagates satellite orbits.

** 2.3. ~visibility.py~

- *solarexclusion(...)*: Calculates solar exclusion for all satellites.
- *exclusion(...)*: Checks for Sun, Moon, and Earth exclusion.
- *update_visibility_table(...)*: Updates the visibility table.

** 2.4. ~pointing.py~

- *jerk(...)*: Randomly adjusts a satellite's pointing.
- *find_and_jerk_blind_satellites(...)*: Finds and jerks blind satellites.

** 2.5. Plotting Modules

- *plotting_3d.plot_3d_scatter(...)*: Creates 3D scatter plots.
- *plotting_vectors.plot_pointing_vectors(...)*: Plots pointing vectors.

** 2.6. Demos

A set of demonstration functions are available as standalone scripts
(e.g., ~demo1.py~, ~demo2.py~). The ~all_demos.py~ script can be
used to execute all of the demos in sequence.

** 2.7. ~radiometry_calcs.py~

- *mag(x)*, *amag(x)*: Magnitude conversions.
- *blackbody_flux(...)*: Calculates blackbody flux in a band.
- *stefan_boltzmann_law(...)*: Calculates total radiated power.
- *plot_blackbody_spectrum(...)*: Plots blackbody spectrum.

** 2.8. ~lambertian.py~

- *lambertiansphere(...)*: Calculates brightness of a
  Lambertian sphere.

** 2.9. ~generate_log_spherical_points.py~

- *generate_log_spherical_points(...)*: Generates 3D points.

* 3. Dependencies

Required Python modules: ~numpy~, ~astropy~, ~jplephem~, ~sgp4~,
~plotly~, ~scipy~.

#+BEGIN_SRC bash
pip install numpy astropy jplephem sgp4 plotly scipy
#+END_SRC
